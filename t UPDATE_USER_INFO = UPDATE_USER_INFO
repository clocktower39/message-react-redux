[1mdiff --git a/public/index.html b/public/index.html[m
[1mindex f1851b8..39c4101 100644[m
[1m--- a/public/index.html[m
[1m+++ b/public/index.html[m
[36m@@ -6,8 +6,8 @@[m
     <meta name="viewport" content="width=device-width, initial-scale=1" />[m
     <meta name="theme-color" content="#000000" />[m
     <meta[m
[31m-      name="description"[m
[31m-      content="Web site created using create-react-app"[m
[32m+[m[32m      name="Bonfire"[m
[32m+[m[32m      content="Bonfire message app"[m
     />[m
     <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />[m
     <!--[m
[1mdiff --git a/public/manifest.json b/public/manifest.json[m
[1mindex 080d6c7..d1d9331 100644[m
[1m--- a/public/manifest.json[m
[1m+++ b/public/manifest.json[m
[36m@@ -1,6 +1,6 @@[m
 {[m
[31m-  "short_name": "React App",[m
[31m-  "name": "Create React App Sample",[m
[32m+[m[32m  "short_name": "Bonfire",[m
[32m+[m[32m  "name": "Bonfire Message App",[m
   "icons": [[m
     {[m
       "src": "favicon.ico",[m
[1mdiff --git a/src/Components/Chat/MessageInput.js b/src/Components/Chat/MessageInput.js[m
[1mindex 3f68872..29fc9ee 100644[m
[1m--- a/src/Components/Chat/MessageInput.js[m
[1m+++ b/src/Components/Chat/MessageInput.js[m
[36m@@ -1,7 +1,7 @@[m
 import React, { useState, useEffect } from 'react';[m
 import { Button, Container, TextField, Grid } from '@mui/material';[m
 import { useSelector, useDispatch } from 'react-redux'[m
[31m-import { addMessage } from '../../Redux/actions';[m
[32m+[m[32mimport { addMessage, sendMessage } from '../../Redux/actions';[m
 [m
 export const MessageInput = (props) => {[m
 [m
[36m@@ -18,16 +18,7 @@[m [mexport const MessageInput = (props) => {[m
 [m
   const handleMessageSubmit = (e) => {[m
     if (name !== '' && message !== '') {[m
[31m-      let newMessage = JSON.stringify({ name: name, message: message });[m
[31m-[m
[31m-      fetch('https://immense-harbor-48108.herokuapp.com/messages', {[m
[31m-        method: 'post', dataType: 'json',[m
[31m-        body: newMessage,[m
[31m-        headers: {[m
[31m-          "Content-type": "application/json; charset=UTF-8"[m
[31m-        }[m
[31m-      });[m
[31m-[m
[32m+[m[32m      dispatch(sendMessage(name, message))[m
       setMessage('');[m
 [m
     }[m
[1mdiff --git a/src/Components/Chat/MessageList.js b/src/Components/Chat/MessageList.js[m
[1mindex 4095aa2..602251c 100644[m
[1m--- a/src/Components/Chat/MessageList.js[m
[1m+++ b/src/Components/Chat/MessageList.js[m
[36m@@ -24,13 +24,7 @@[m [mexport const MessageList = (props) => {[m
   }, [props.messages]);[m
 [m
   useEffect(() => {[m
[31m-    fetch("https://immense-harbor-48108.herokuapp.com/messages/", {[m
[31m-      headers: new Headers({[m
[31m-        Authorization: "Bearer " + localStorage.getItem("JWT_AUTH_TOKEN"),[m
[31m-      }),[m
[31m-    })[m
[31m-      .then((res) => res.json())[m
[31m-      .then((data) => dispatch(updateMessageList([...data])));[m
[32m+[m[32m    dispatch(updateMessageList());[m
     // eslint-disable-next-line[m
   }, []);[m
 [m
[1mdiff --git a/src/Redux/actions.js b/src/Redux/actions.js[m
[1mindex 745c65d..3ceef18 100644[m
[1m--- a/src/Redux/actions.js[m
[1m+++ b/src/Redux/actions.js[m
[36m@@ -8,7 +8,39 @@[m [mexport const UPDATE_MESSAGE_LIST = 'UPDATE_MESSAGE_LIST';[m
 export const UPDATE_USER_INFO = 'UPDATE_USER_INFO';[m
 export const ERROR = 'ERROR';[m
 [m
[31m-export function addMessage(name, message){[m
[32m+[m[32m// dev server[m
[32m+[m[32mconst currentIP = window.location.href.split(":")[1];[m
[32m+[m[32mconst serverURL = `http:${currentIP}:8000`;[m
[32m+[m
[32m+[m[32m// live server[m
[32m+[m[32m// const serverURL = "https://immense-harbor-48108.herokuapp.com";[m
[32m+[m
[32m+[m[32mexport function sendMessage(name, message) {[m
[32m+[m[32m    return async (dispatch, getState) => {[m
[32m+[m[32m        const bearer = `Bearer ${localStorage.getItem('JWT_AUTH_TOKEN')}`;[m
[32m+[m[32m        let newMessage = JSON.stringify({ name: name, message: message });[m
[32m+[m
[32m+[m[32m        const response = await fetch(`${serverURL}/messages`, {[m
[32m+[m[32m            method: 'post', dataType: 'json',[m
[32m+[m[32m            body: newMessage,[m
[32m+[m[32m            headers: {[m
[32m+[m[32m                "Content-type": "application/json; charset=UTF-8",[m
[32m+[m[32m                "Authorization": bearer,[m
[32m+[m[32m            }[m
[32m+[m[32m        });[m
[32m+[m
[32m+[m[32m        const data = await response.json();[m
[32m+[m
[32m+[m[32m        if (data.error) {[m
[32m+[m[32m            return dispatch({[m
[32m+[m[32m                type: ERROR,[m
[32m+[m[32m                error: data.error[m
[32m+[m[32m            });[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mexport function addMessage(name, message) {[m
     return {[m
         type: ADD_MESSAGE,[m
         name: name,[m
[36m@@ -17,18 +49,29 @@[m [mexport function addMessage(name, message){[m
     }[m
 }[m
 [m
[31m-export function updateMessageList(messages){[m
[31m-    return {[m
[31m-        type: UPDATE_MESSAGE_LIST,[m
[31m-        messages: messages[m
[32m+[m[32mexport function updateMessageList() {[m
[32m+[m[32m    return async (dispatch, getState) => {[m
[32m+[m[32m        const bearer = `Bearer ${localStorage.getItem('JWT_AUTH_TOKEN')}`;[m
[32m+[m
[32m+[m[32m        const response = await fetch(`${serverURL}/messages`, {[m
[32m+[m[32m            headers: {[m
[32m+[m[32m                "Authorization": bearer,[m
[32m+[m[32m            }[m
[32m+[m[32m        });[m
[32m+[m[32m         const data = await response.json();[m
[32m+[m
[32m+[m[32m        return dispatch({[m
[32m+[m[32m            type: UPDATE_MESSAGE_LIST,[m
[32m+[m[32m            messages: [...data][m
[32m+[m[32m        })[m
     }[m
 }[m
 [m
[31m-export function deleteMessage(messageToDelete){[m
[32m+[m[32mexport function deleteMessage(messageToDelete) {[m
     return async (dispatch, getState) => {[m
         const state = getState();[m
 [m
[31m-        const messages = state.messages.filter((message)=>message._id!==messageToDelete._id)[m
[32m+[m[32m        const messages = state.messages.filter((message) => message._id !== messageToDelete._id)[m
 [m
         return dispatch({[m
             type: UPDATE_MESSAGE_LIST,[m
[36m@@ -37,18 +80,18 @@[m [mexport function deleteMessage(messageToDelete){[m
     }[m
 }[m
 [m
[31m-export function signupUser(user){[m
[32m+[m[32mexport function signupUser(user) {[m
     return async (dispatch, getState) => {[m
[31m-        const response = await fetch('https://immense-harbor-48108.herokuapp.com/signup', {[m
[32m+[m[32m        const response = await fetch(`${serverURL}/signup`, {[m
             method: 'post',[m
             dataType: 'json',[m
             body: user,[m
             headers: {[m
[31m-              "Content-type": "application/json; charset=UTF-8"[m
[32m+[m[32m                "Content-type": "application/json; charset=UTF-8"[m
             }[m
[31m-          })[m
[32m+[m[32m        })[m
         const data = await response.json();[m
[31m-        if(data.error){[m
[32m+[m[32m        if (data.error) {[m
             return dispatch({[m
                 type: ERROR,[m
                 error: data.error[m
[36m@@ -59,18 +102,18 @@[m [mexport function signupUser(user){[m
     }[m
 }[m
 [m
[31m-export function loginUser(user){[m
[32m+[m[32mexport function loginUser(user) {[m
     return async (dispatch, getState) => {[m
[31m-        const response = await fetch('https://immense-harbor-48108.herokuapp.com/login', {[m
[32m+[m[32m        const response = await fetch(`${serverURL}/login`, {[m
             method: 'post',[m
             dataType: 'json',[m
             body: user,[m
             headers: {[m
[31m-              "Content-type": "application/json; charset=UTF-8"[m
[32m+[m[32m                "Content-type": "application/json; charset=UTF-8"[m
             }[m
[31m-          })[m
[32m+[m[32m        })[m
         const data = await response.json();[m
[31m-        if(data.error){[m
[32m+[m[32m        if (data.error) {[m
             return dispatch({[m
                 type: ERROR,[m
                 error: data.error[m
[36m@@ -78,7 +121,7 @@[m [mexport function loginUser(user){[m
         }[m
         const accessToken = data.accessToken;[m
         const decodedAccessToken = jwt(accessToken);[m
[31m-        [m
[32m+[m
         localStorage.setItem('JWT_AUTH_TOKEN', accessToken);[m
         return dispatch({[m
             type: LOGIN_USER,[m
[36m@@ -89,16 +132,33 @@[m [mexport function loginUser(user){[m
 [m
 export const loginJWT = (token) => {[m
     return async (dispatch, getState) => {[m
[31m-        const decodedAccessToken = jwt(token);[m
[31m-        return dispatch({[m
[31m-            type: LOGIN_USER,[m
[31m-            user: decodedAccessToken,[m
[31m-        });[m
[32m+[m[32m        const bearer = `Bearer ${localStorage.getItem('JWT_AUTH_TOKEN')}`;[m
[32m+[m
[32m+[m[32m        const response = await fetch(`${serverURL}/checkAuthToken`, {[m
[32m+[m[32m            headers: {[m
[32m+[m[32m                "Authorization": bearer,[m
[32m+[m[32m            }[m
[32m+[m[32m        })[m
[32m+[m
[32m+[m[32m        const text = await response.text().then(item => item);[m
[32m+[m[32m        if (text === "Authorized") {[m
[32m+[m[32m            const decodedAccessToken = jwt(token);[m
[32m+[m[32m            return dispatch({[m
[32m+[m[32m                type: LOGIN_USER,[m
[32m+[m[32m                user: decodedAccessToken,[m
[32m+[m[32m            });[m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[32m            localStorage.removeItem('JWT_AUTH_TOKEN');[m
[32m+[m[32m            return dispatch({[m
[32m+[m[32m                type: LOGOUT_USER[m
[32m+[m[32m            })[m
[32m+[m[32m        }[m
     }[m
 }[m
 [m
 [m
[31m-export function logoutUser(){[m
[32m+[m[32mexport function logoutUser() {[m
     return async (dispatch, getState) => {[m
         localStorage.removeItem('JWT_AUTH_TOKEN');[m
         return dispatch({[m
[1mdiff --git a/src/index.js b/src/index.js[m
[1mindex 457815f..5424c23 100644[m
[1m--- a/src/index.js[m
[1m+++ b/src/index.js[m
[36m@@ -6,7 +6,9 @@[m [mimport reportWebVitals from './reportWebVitals';[m
 import { Provider } from 'react-redux';[m
 import { store } from './Redux/store';[m
 import socketIOClient from "socket.io-client";[m
[31m-const ENDPOINT = "https://immense-harbor-48108.herokuapp.com";[m
[32m+[m[32m// const ENDPOINT = "https://immense-harbor-48108.herokuapp.com";[m
[32m+[m[32mconst currentIP = window.location.href.split(":")[1];[m
[32m+[m[32mconst ENDPOINT = `http:${currentIP}:8000`;[m
 const socket = socketIOClient(ENDPOINT,{transports: ['websocket'], upgrade: false});[m
 [m
 ReactDOM.render([m
